package ru.practicum.client;

import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import ru.practicum.common.services.ProductService;
import ru.practicum.common.services.RecommendationService;

import java.util.List;
import java.util.Scanner;

@Slf4j
@SpringBootApplication
public class ClientApplication {
    private static final Scanner scanner = new Scanner(System.in);
    private static ProductService productService;
    private static RecommendationService recommendationService;

    public static void main(String[] args) {
        runMenu();
    }

    private static void runMenu() {
        log.info("üõí –í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã");

        Integer userId = processUser();

        while (true) {
            log.info("üõí –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:");
            log.info("1. –ü–æ–∏—Å–∫ <product_name> - –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∏–º–µ–Ω–∏");
            log.info("2. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ <user_id> - –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏");
            log.info("3. –í—ã—Ö–æ–¥ - –≤—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è");
            System.out.print("\n> ");
            String input = scanner.nextLine().trim();

            if (input.equalsIgnoreCase("3")) {
                log.info("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!");
                break;
            }

            processCommand(input, userId);
        }
    }

    private static int processUser() {
        log.info("üë§ –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç 1 –¥–æ 10");
        Integer number = null;
        String input = scanner.nextLine().trim();
        try {
            number = Integer.parseInt(input);
            if (number >= 1 && number <= 10) {
                log.info("‚úÖ –ü—Ä–∏–Ω—è—Ç–æ —á–∏—Å–ª–æ: " + number);
            } else {
                log.error("‚ùå –ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            }
        } catch (NumberFormatException e) {
            log.error("‚ùå –î–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–≤–æ–¥ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª");
        }
        return number;
    }

    private static void processCommand(String input, Integer userId) {
        switch (input) {
            case "1" -> processProduct(userId);
            case "2" -> getRecommendations(userId);
            default -> {log.info("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");}
        }
    }

    private static void processProduct(Integer userId) {
        log.info("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:");
        String input = scanner.nextLine().trim();
        productService = new ProductService();
        List<String> products = productService.searchProducts(input);

        for (String product : products) {
            log.info("<> /n", product);
        }

        //TODO –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –∫–∞—Ñ–∫–∞
    }

    private static void getRecommendations(Integer userId) {
        log.info("üéÅ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", userId);

        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            List<String> userHistory = getUserViewHistory(userId);
            recommendationService = new RecommendationService();
            // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏
            List<String> recommendations = recommendationService.generateRecommendations(userId, userHistory);

            displayRecommendations(recommendations, userId);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {}", e.getMessage());
            // Fallback - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
            log.info("–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –µ—â–µ –Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π", userId);
        }
    }

    private static List<String> getUserViewHistory(int userId) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        // –°–µ–π—á–∞—Å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ
        return List.of("electronics", "smartphones", "gadgets");
    }

    private static void displayRecommendations(List<String> recommendations, int userId) {
        log.info("‚ú® –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}:", userId);

        for (String recomendation : recommendations){
            log.info("{}", recomendation);
        }
    }
}
